# level 13
## Methode 1
Le home contient un binaire ("level13") appartenant à flag13 et avec le suid.
Au lancement du binaire, nous obtenons un message d'erreur :
```sh
$> ./level13 
UID 2013 started us but we we expect 4242
```
Nous savons donc que le binaire attend que nous utilisateur ait l'uid 4242 pour pouvoir être exécuté.

Nous copions donc ce binaire sur notre VM via scp puis nous ajouter un nouvel utilisateur sur la machine avec l'uid 4242 :
```sh
$> scp -P 4242 level13@<ip>:/home/user/level13/level13 .
$> useradd -u 4242 test
```

Il suffit maintenant de se connecter à cet utilisateur puis de lancer le binaire :

```sh
$> su test13
$> ./level13
your token is 2A31L79asukciNyi8uppkEuSx
```

## Methode 2
Le uid attendu est 4242 et `nm -u` montre que `level13` fait appel à la fonction getuid.
Nous allons créer un bibliothèque dynamique avec la fonction getuid qui retournera toujours `4242`, puis nous allons l'injecter à `level13` pour quelle soit utilisée à la place de la vraie fonction.
Pour ce faire, nous devons copier `level13` pour qu'il n'ait plus son suid, car ce dernier désactive l'injection de bibliothèque :
```sh
$> cp level13 /tmp/level13
```

Voici le code de la fonction qui sera enregistré dans /tmp/getuid.c :
```c
#include <unistd.h>
#include <sys/types.h>

uid_t getuid(void)
{
	return (4242);
}
```

Après la compilation, il suffit d'appeler `level13` avec l'injection :
```sh
$> gcc -shared -fPIC /tmp/getuid.c -o /tmp/getuid.so
$> LD_PRELOAD=/tmp/getuid.so ./level13
your token is 2A31L79asukciNyi8uppkEuSx
```
